from time import *
import math
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

def process_number():
    i = 1
    while factorial_len(triangle(i))< 501:
        #print i
        i += 1
    return triangle(i)

def factorial_len(num):
    length = 0
    templst = []
    for i in range(1,int(num**0.5)+1):
        if num % i == 0:
            length += 2
    if int(num**0.5)**2 == num:
        length -= 1
    return length

def triangle(num):
    return((long(num*(num+1))))/2

start = clock()
print process_number()
print clock() - start, "seconds"

